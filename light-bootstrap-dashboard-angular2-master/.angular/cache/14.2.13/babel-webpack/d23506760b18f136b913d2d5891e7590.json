{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SalesService = void 0;\n\nconst rxjs_1 = require(\"rxjs\");\n\nconst i0 = require(\"@angular/core\");\n\nclass SalesService {\n  constructor() {}\n\n  getSalesData(fromDate, toDate) {\n    // Generate dummy sales data\n    const salesData = this.generateDummySalesData(fromDate, toDate);\n    const customers = this.getTopCustomers(salesData);\n    const materialGroups = this.getMaterialGroups(salesData);\n    return (0, rxjs_1.of)({\n      sales: salesData,\n      customers,\n      materialGroups\n    });\n  }\n\n  generateDummySalesData(fromDate, toDate) {\n    // Sample data generation logic\n    const sales = [];\n\n    for (let i = 0; i < 100; i++) {\n      sales.push({\n        salesOrder: `SO${i + 1}`,\n        salesOffice: Math.floor(Math.random() * 1000),\n        documentDate: this.getRandomDate(fromDate, toDate),\n        customerName: `Customer ${Math.floor(Math.random() * 20) + 1}`,\n        materialGroup: `Material Group ${Math.floor(Math.random() * 5) + 1}`,\n        amountInvoiced: Math.floor(Math.random() * 10000) + 5000\n      });\n    }\n\n    return sales;\n  }\n\n  getTopCustomers(salesData) {\n    const customerTotals = salesData.reduce((acc, sale) => {\n      acc[sale.customerName] = (acc[sale.customerName] || 0) + sale.amountInvoiced;\n      return acc;\n    }, {});\n    return Object.keys(customerTotals).map(customer => ({\n      name: customer,\n      totalSales: customerTotals[customer]\n    })).sort((a, b) => b.totalSales - a.totalSales).slice(0, 5); // Top 5 customers\n  }\n\n  getMaterialGroups(salesData) {\n    const groupTotals = salesData.reduce((acc, sale) => {\n      acc[sale.materialGroup] = (acc[sale.materialGroup] || 0) + sale.amountInvoiced;\n      return acc;\n    }, {});\n    return Object.keys(groupTotals).map(group => ({\n      name: group,\n      totalSales: groupTotals[group]\n    }));\n  }\n\n  getRandomDate(fromDate, toDate) {\n    const start = new Date(fromDate).getTime();\n    const end = new Date(toDate).getTime();\n    const randomTime = Math.random() * (end - start) + start;\n    return new Date(randomTime).toLocaleDateString(\"en-CA\"); // Format YYYY-MM-DD\n  }\n\n}\n\nexports.SalesService = SalesService;\n\nSalesService.ɵfac = function SalesService_Factory(t) {\n  return new (t || SalesService)();\n};\n\nSalesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SalesService,\n  factory: SalesService.ɵfac,\n  providedIn: \"root\"\n});","map":null,"metadata":{},"sourceType":"script"}