{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TablesComponent = void 0;\n\nconst core_1 = require(\"@angular/core\");\n\nconst forms_1 = require(\"@angular/forms\");\n\nconst sales_data_service_1 = require(\"app/sales-data.service\");\n\nlet TablesComponent = class TablesComponent {\n  constructor(salesDataService, fb) {\n    this.salesDataService = salesDataService;\n    this.fb = fb;\n    this.salesData = []; // Will hold the sales data\n\n    this.filteredSalesData = []; // Holds the filtered sales data\n  }\n\n  ngOnInit() {\n    this.dateForm = this.fb.group({\n      fromDate: [\"\"],\n      toDate: [\"\"]\n    }); //this.fetchSalesData(); // Fetch data on component initialization\n\n    this.salesForm = this.fb.group({\n      vkbur: [\"1034\"],\n      vkorg: [\"9000\"],\n      vbeln: [\"\"],\n      kunnr: [\"\"],\n      matnr: [\"\"],\n      budat: [\"\"],\n      auart: [\"ZRS\"]\n    });\n  } // Method to fetch sales data\n\n\n  fetchSalesData() {\n    const formData = this.salesForm.value;\n    console.log(\"Sending form data:\", formData); // Log the form data\n\n    this.salesDataService.getSalesReport(formData).subscribe(data => {\n      console.log(\"Received data:\", data); // Log the received data\n\n      this.salesData = data; // Assign the data to salesData\n\n      this.filteredSalesData = data; // Initially show all data\n    }, error => {\n      console.error(\"Error fetching sales data:\", error);\n    });\n  }\n\n  onFilter() {\n    const {\n      fromDate,\n      toDate\n    } = this.dateForm.value;\n\n    if (fromDate && toDate) {\n      this.filteredSalesData = this.salesData.filter(sale => {\n        const saleDate = new Date(sale.AUDAT); // Convert document date to Date object\n\n        return saleDate >= new Date(fromDate) && saleDate <= new Date(toDate);\n      });\n    } else {\n      this.filteredSalesData = this.salesData; // If no date range selected, show all data\n    }\n\n    this.updateCharts(this.filteredSalesData); // Update charts with filtered data\n  } // Method to update charts based on the filtered data\n\n\n  updateCharts(filteredData) {// Here, use any charting library like Chart.js, Highcharts, etc., to generate charts\n    // based on the filteredData.\n  }\n\n};\nTablesComponent = __decorate([(0, core_1.Component)({\n  selector: \"app-tables\",\n  templateUrl: \"./tables.component.html\",\n  styleUrls: [\"./tables.component.css\"]\n}), __metadata(\"design:paramtypes\", [sales_data_service_1.SalesDataService, forms_1.FormBuilder])], TablesComponent);\nexports.TablesComponent = TablesComponent;","map":null,"metadata":{},"sourceType":"script"}