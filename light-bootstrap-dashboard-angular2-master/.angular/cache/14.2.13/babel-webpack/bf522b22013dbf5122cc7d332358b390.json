{"ast":null,"code":"\"use strict\";\n\nexports.LocalWeekYearParser = void 0;\n\nvar _index = require(\"../../../getWeekYear.cjs\");\n\nvar _index2 = require(\"../../../startOfWeek.cjs\");\n\nvar _Parser = require(\"../Parser.cjs\");\n\nvar _utils = require(\"../utils.cjs\"); // Local week-numbering year\n\n\nclass LocalWeekYearParser extends _Parser.Parser {\n  priority = 130;\n\n  parse(dateString, token, match) {\n    const valueCallback = year => ({\n      year,\n      isTwoDigitYear: token === \"YY\"\n    });\n\n    switch (token) {\n      case \"Y\":\n        return (0, _utils.mapValue)((0, _utils.parseNDigits)(4, dateString), valueCallback);\n\n      case \"Yo\":\n        return (0, _utils.mapValue)(match.ordinalNumber(dateString, {\n          unit: \"year\"\n        }), valueCallback);\n\n      default:\n        return (0, _utils.mapValue)((0, _utils.parseNDigits)(token.length, dateString), valueCallback);\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value, options) {\n    const currentYear = (0, _index.getWeekYear)(date, options);\n\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = (0, _utils.normalizeTwoDigitYear)(value.year, currentYear);\n      date.setFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);\n      date.setHours(0, 0, 0, 0);\n      return (0, _index2.startOfWeek)(date, options);\n    }\n\n    const year = !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, options.firstWeekContainsDate);\n    date.setHours(0, 0, 0, 0);\n    return (0, _index2.startOfWeek)(date, options);\n  }\n\n  incompatibleTokens = [\"y\", \"R\", \"u\", \"Q\", \"q\", \"M\", \"L\", \"I\", \"d\", \"D\", \"i\", \"t\", \"T\"];\n}\n\nexports.LocalWeekYearParser = LocalWeekYearParser;","map":null,"metadata":{},"sourceType":"script"}