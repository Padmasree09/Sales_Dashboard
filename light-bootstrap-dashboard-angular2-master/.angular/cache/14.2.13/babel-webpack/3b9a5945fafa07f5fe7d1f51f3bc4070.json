{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HomeComponent = void 0;\n\nconst core_1 = require(\"@angular/core\");\n\nconst lbd_chart_component_1 = require(\"app/lbd/lbd-chart/lbd-chart.component\");\n\nconst sales_service_1 = require(\"app/sales.service\");\n\nlet HomeComponent = class HomeComponent {\n  constructor(salesService) {\n    this.salesService = salesService;\n    this.salesData = [];\n    this.customerChartData = {};\n    this.materialGroupChartData = {};\n    this.customerChartType = lbd_chart_component_1.ChartType.Bar; // Use the enum for types\n\n    this.materialGroupChartType = lbd_chart_component_1.ChartType.Pie; // Use the enum for types\n\n    this.customerChartLegendItems = [];\n    this.materialGroupChartLegendItems = [];\n    this.lastUpdated = \"\";\n  }\n\n  ngOnInit() {\n    // Optionally fetch initial data or set up defaults\n    this.fromDate = \"\";\n    this.toDate = \"\";\n  }\n\n  onDateSubmit() {\n    this.fetchSalesData(this.fromDate, this.toDate);\n  }\n\n  fetchSalesData(fromDate, toDate) {\n    this.salesData = this.generateRandomSalesData();\n    const randomCustomerData = this.generateRandomCustomerData();\n    const randomMaterialGroupData = this.generateRandomMaterialGroupData();\n    this.customerChartData = this.prepareCustomerChartData(randomCustomerData);\n    this.materialGroupChartData = this.prepareMaterialGroupChartData(randomMaterialGroupData);\n    this.customerChartLegendItems = randomCustomerData.map(customer => ({\n      title: customer.name,\n      imageClass: \"fa fa-circle text-info\" // Example class for icons\n\n    }));\n    this.materialGroupChartLegendItems = randomMaterialGroupData.map(group => ({\n      title: group.name,\n      imageClass: \"fa fa-circle text-success\" // Example class for icons\n\n    }));\n    this.lastUpdated = new Date().toLocaleString();\n    console.log(\"Customer Chart Data:\", this.customerChartData);\n    console.log(\"Material Group Chart Data:\", this.materialGroupChartData);\n  }\n\n  generateRandomSalesData() {\n    const sales = [];\n\n    for (let i = 0; i < 10; i++) {\n      sales.push({\n        \"Sales Order\": `SO-${i + 1}`,\n        \"Sales Office\": `Office ${Math.floor(Math.random() * 5) + 1}`,\n        \"Document Date\": new Date(Date.now() - Math.random() * 10000000000),\n        \"Customer Name\": `Customer ${Math.floor(Math.random() * 10) + 1}`,\n        Material: `Material ${Math.floor(Math.random() * 10) + 1}`,\n        \"SO Value\": Math.floor(Math.random() * 1000) + 100,\n        \"Amount Invoiced\": Math.floor(Math.random() * 1000) + 100\n      });\n    }\n\n    return sales;\n  }\n\n  generateRandomCustomerData() {\n    const customers = [];\n    const customerNames = [\"Customer A\", \"Customer B\", \"Customer C\", \"Customer D\"];\n\n    for (let i = 0; i < 4; i++) {\n      const customer = {\n        name: customerNames[i],\n        totalSales: Math.floor(Math.random() * 10000) + 1000 // Random sales between 1000 and 11000\n\n      };\n      customers.push(customer);\n    }\n\n    return customers;\n  }\n\n  generateRandomMaterialGroupData() {\n    const materialGroups = [];\n    const groupNames = [\"Group 1\", \"Group 2\", \"Group 3\"];\n\n    for (let i = 0; i < 3; i++) {\n      const group = {\n        name: groupNames[i],\n        totalSales: Math.floor(Math.random() * 5000) + 500 // Random sales between 500 and 5500\n\n      };\n      materialGroups.push(group);\n    }\n\n    return materialGroups;\n  }\n\n  prepareCustomerChartData(customers) {\n    return {\n      labels: customers.map(customer => customer.name),\n      series: [customers.map(customer => customer.totalSales)] // Wrap in an array\n\n    };\n  }\n\n  prepareMaterialGroupChartData(materialGroups) {\n    return {\n      labels: materialGroups.map(group => group.name),\n      series: materialGroups.map(group => group.totalSales) // No need to wrap here\n\n    };\n  }\n\n};\nHomeComponent = __decorate([(0, core_1.Component)({\n  selector: \"app-home\",\n  templateUrl: \"./home.component.html\",\n  styleUrls: [\"./home.component.css\"]\n}), __metadata(\"design:paramtypes\", [sales_service_1.SalesService])], HomeComponent);\nexports.HomeComponent = HomeComponent;","map":null,"metadata":{},"sourceType":"script"}