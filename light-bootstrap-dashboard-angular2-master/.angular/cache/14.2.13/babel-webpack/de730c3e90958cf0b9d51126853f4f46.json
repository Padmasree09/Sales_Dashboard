{"ast":null,"code":"\"use strict\";\n\nexports.isSameWeek = isSameWeek;\n\nvar _index = require(\"./_lib/normalizeDates.cjs\");\n\nvar _index2 = require(\"./startOfWeek.cjs\");\n/**\n * The {@link isSameWeek} function options.\n */\n\n/**\n * @name isSameWeek\n * @category Week Helpers\n * @summary Are the given dates in the same week (and month and year)?\n *\n * @description\n * Are the given dates in the same week (and month and year)?\n *\n * @param laterDate - The first date to check\n * @param earlierDate - The second date to check\n * @param options - An object with options\n *\n * @returns The dates are in the same week (and month and year)\n *\n * @example\n * // Are 31 August 2014 and 4 September 2014 in the same week?\n * const result = isSameWeek(new Date(2014, 7, 31), new Date(2014, 8, 4))\n * //=> true\n *\n * @example\n * // If week starts with Monday,\n * // are 31 August 2014 and 4 September 2014 in the same week?\n * const result = isSameWeek(new Date(2014, 7, 31), new Date(2014, 8, 4), {\n *   weekStartsOn: 1\n * })\n * //=> false\n *\n * @example\n * // Are 1 January 2014 and 1 January 2015 in the same week?\n * const result = isSameWeek(new Date(2014, 0, 1), new Date(2015, 0, 1))\n * //=> false\n */\n\n\nfunction isSameWeek(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = (0, _index.normalizeDates)(options?.in, laterDate, earlierDate);\n  return +(0, _index2.startOfWeek)(laterDate_, options) === +(0, _index2.startOfWeek)(earlierDate_, options);\n}","map":null,"metadata":{},"sourceType":"script"}