{"ast":null,"code":"\"use strict\";\n\nexports.getOverlappingDaysInIntervals = getOverlappingDaysInIntervals;\n\nvar _index = require(\"./_lib/getTimezoneOffsetInMilliseconds.cjs\");\n\nvar _index2 = require(\"./constants.cjs\");\n\nvar _index3 = require(\"./toDate.cjs\");\n/**\n * @name getOverlappingDaysInIntervals\n * @category Interval Helpers\n * @summary Get the number of days that overlap in two time intervals\n *\n * @description\n * Get the number of days that overlap in two time intervals. It uses the time\n * between dates to calculate the number of days, rounding it up to include\n * partial days.\n *\n * Two equal 0-length intervals will result in 0. Two equal 1ms intervals will\n * result in 1.\n *\n * @param intervalLeft - The first interval to compare.\n * @param intervalRight - The second interval to compare.\n * @param options - An object with options\n *\n * @returns The number of days that overlap in two time intervals\n *\n * @example\n * // For overlapping time intervals adds 1 for each started overlapping day:\n * getOverlappingDaysInIntervals(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n * )\n * //=> 3\n *\n * @example\n * // For non-overlapping time intervals returns 0:\n * getOverlappingDaysInIntervals(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\n * )\n * //=> 0\n */\n\n\nfunction getOverlappingDaysInIntervals(intervalLeft, intervalRight) {\n  const [leftStart, leftEnd] = [+(0, _index3.toDate)(intervalLeft.start), +(0, _index3.toDate)(intervalLeft.end)].sort((a, b) => a - b);\n  const [rightStart, rightEnd] = [+(0, _index3.toDate)(intervalRight.start), +(0, _index3.toDate)(intervalRight.end)].sort((a, b) => a - b); // Prevent NaN result if intervals don't overlap at all.\n\n  const isOverlapping = leftStart < rightEnd && rightStart < leftEnd;\n  if (!isOverlapping) return 0; // Remove the timezone offset to negate the DST effect on calculations.\n\n  const overlapLeft = rightStart < leftStart ? leftStart : rightStart;\n  const left = overlapLeft - (0, _index.getTimezoneOffsetInMilliseconds)(overlapLeft);\n  const overlapRight = rightEnd > leftEnd ? leftEnd : rightEnd;\n  const right = overlapRight - (0, _index.getTimezoneOffsetInMilliseconds)(overlapRight); // Ceil the number to include partial days too.\n\n  return Math.ceil((right - left) / _index2.millisecondsInDay);\n}","map":null,"metadata":{},"sourceType":"script"}