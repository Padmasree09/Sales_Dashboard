{"ast":null,"code":"\"use strict\";\n\nexports.YearParser = void 0;\n\nvar _Parser = require(\"../Parser.cjs\");\n\nvar _utils = require(\"../utils.cjs\"); // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n// | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n// |----------|-------|----|-------|-------|-------|\n// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n\nclass YearParser extends _Parser.Parser {\n  priority = 130;\n  incompatibleTokens = [\"Y\", \"R\", \"u\", \"w\", \"I\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n\n  parse(dateString, token, match) {\n    const valueCallback = year => ({\n      year,\n      isTwoDigitYear: token === \"yy\"\n    });\n\n    switch (token) {\n      case \"y\":\n        return (0, _utils.mapValue)((0, _utils.parseNDigits)(4, dateString), valueCallback);\n\n      case \"yo\":\n        return (0, _utils.mapValue)(match.ordinalNumber(dateString, {\n          unit: \"year\"\n        }), valueCallback);\n\n      default:\n        return (0, _utils.mapValue)((0, _utils.parseNDigits)(token.length, dateString), valueCallback);\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value) {\n    const currentYear = date.getFullYear();\n\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = (0, _utils.normalizeTwoDigitYear)(value.year, currentYear);\n      date.setFullYear(normalizedTwoDigitYear, 0, 1);\n      date.setHours(0, 0, 0, 0);\n      return date;\n    }\n\n    const year = !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n}\n\nexports.YearParser = YearParser;","map":null,"metadata":{},"sourceType":"script"}