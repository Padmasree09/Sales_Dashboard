{"ast":null,"code":"\"use strict\";\n\nexports.eachQuarterOfInterval = eachQuarterOfInterval;\n\nvar _index = require(\"./_lib/normalizeInterval.cjs\");\n\nvar _index2 = require(\"./addQuarters.cjs\");\n\nvar _index3 = require(\"./constructFrom.cjs\");\n\nvar _index4 = require(\"./startOfQuarter.cjs\");\n/**\n * The {@link eachQuarterOfInterval} function options.\n */\n\n/**\n * The {@link eachQuarterOfInterval} function result type. It resolves the proper data type.\n * It uses the first argument date object type, starting from the date argument,\n * then the start interval date, and finally the end interval date. If\n * a context function is passed, it uses the context function return type.\n */\n\n/**\n * @name eachQuarterOfInterval\n * @category Interval Helpers\n * @summary Return the array of quarters within the specified time interval.\n *\n * @description\n * Return the array of quarters within the specified time interval.\n *\n * @typeParam IntervalType - Interval type.\n * @typeParam Options - Options type.\n *\n * @param interval - The interval\n * @param options - An object with options\n *\n * @returns The array with starts of quarters from the quarter of the interval start to the quarter of the interval end\n *\n * @example\n * // Each quarter within interval 6 February 2014 - 10 August 2014:\n * const result = eachQuarterOfInterval({\n *   start: new Date(2014, 1, 6),\n *   end: new Date(2014, 7, 10),\n * })\n * //=> [\n * //   Wed Jan 01 2014 00:00:00,\n * //   Tue Apr 01 2014 00:00:00,\n * //   Tue Jul 01 2014 00:00:00,\n * // ]\n */\n\n\nfunction eachQuarterOfInterval(interval, options) {\n  const {\n    start,\n    end\n  } = (0, _index.normalizeInterval)(options?.in, interval);\n  let reversed = +start > +end;\n  const endTime = reversed ? +(0, _index4.startOfQuarter)(start) : +(0, _index4.startOfQuarter)(end);\n  let date = reversed ? (0, _index4.startOfQuarter)(end) : (0, _index4.startOfQuarter)(start);\n  let step = options?.step ?? 1;\n  if (!step) return [];\n\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n\n  const dates = [];\n\n  while (+date <= endTime) {\n    dates.push((0, _index3.constructFrom)(start, date));\n    date = (0, _index2.addQuarters)(date, step);\n  }\n\n  return reversed ? dates.reverse() : dates;\n}","map":null,"metadata":{},"sourceType":"script"}