{"ast":null,"code":"\"use strict\";\n\nexports.differenceInBusinessDays = differenceInBusinessDays;\n\nvar _index = require(\"./_lib/normalizeDates.cjs\");\n\nvar _index2 = require(\"./addDays.cjs\");\n\nvar _index3 = require(\"./differenceInCalendarDays.cjs\");\n\nvar _index4 = require(\"./isSameDay.cjs\");\n\nvar _index5 = require(\"./isValid.cjs\");\n\nvar _index6 = require(\"./isWeekend.cjs\");\n/**\n * The {@link differenceInBusinessDays} function options.\n */\n\n/**\n * @name differenceInBusinessDays\n * @category Day Helpers\n * @summary Get the number of business days between the given dates.\n *\n * @description\n * Get the number of business day periods between the given dates.\n * Business days being days that aren't in the weekend.\n * Like `differenceInCalendarDays`, the function removes the times from\n * the dates before calculating the difference.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n *\n * @returns The number of business days\n *\n * @example\n * // How many business days are between\n * // 10 January 2014 and 20 July 2014?\n * const result = differenceInBusinessDays(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 0, 10)\n * )\n * //=> 136\n *\n * // How many business days are between\n * // 30 November 2021 and 1 November 2021?\n * const result = differenceInBusinessDays(\n *   new Date(2021, 10, 30),\n *   new Date(2021, 10, 1)\n * )\n * //=> 21\n *\n * // How many business days are between\n * // 1 November 2021 and 1 December 2021?\n * const result = differenceInBusinessDays(\n *   new Date(2021, 10, 1),\n *   new Date(2021, 11, 1)\n * )\n * //=> -22\n *\n * // How many business days are between\n * // 1 November 2021 and 1 November 2021 ?\n * const result = differenceInBusinessDays(\n *   new Date(2021, 10, 1),\n *   new Date(2021, 10, 1)\n * )\n * //=> 0\n */\n\n\nfunction differenceInBusinessDays(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = (0, _index.normalizeDates)(options?.in, laterDate, earlierDate);\n  if (!(0, _index5.isValid)(laterDate_) || !(0, _index5.isValid)(earlierDate_)) return NaN;\n  const diff = (0, _index3.differenceInCalendarDays)(laterDate_, earlierDate_);\n  const sign = diff < 0 ? -1 : 1;\n  const weeks = Math.trunc(diff / 7);\n  let result = weeks * 5;\n  let movingDate = (0, _index2.addDays)(earlierDate_, weeks * 7); // the loop below will run at most 6 times to account for the remaining days that don't makeup a full week\n\n  while (!(0, _index4.isSameDay)(laterDate_, movingDate)) {\n    // sign is used to account for both negative and positive differences\n    result += (0, _index6.isWeekend)(movingDate, options) ? 0 : sign;\n    movingDate = (0, _index2.addDays)(movingDate, sign);\n  } // Prevent negative zero\n\n\n  return result === 0 ? 0 : result;\n}","map":null,"metadata":{},"sourceType":"script"}