{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TablesComponent = void 0;\n\nconst core_1 = require(\"@angular/core\");\n\nconst forms_1 = require(\"@angular/forms\");\n\nconst sales_data_service_1 = require(\"app/sales-data.service\");\n\nconst chart_js_1 = require(\"chart.js\");\n\nconst sidebar_component_1 = require(\"../sidebar/sidebar.component\");\n\nchart_js_1.Chart.register(...chart_js_1.registerables); // Register Chart.js components\n\nlet TablesComponent = class TablesComponent {\n  constructor(salesDataService, fb, cdr) {\n    this.salesDataService = salesDataService;\n    this.fb = fb;\n    this.cdr = cdr;\n    this.salesData = []; // Will hold the sales data\n\n    this.filteredSalesData = []; // Holds the filtered sales data\n\n    this.currentChartIndex = 0; // Start with the first chart\n\n    this.totalCharts = 9; // Total number of charts\n\n    this.currentChart = \"sales\"; // Default chart\n\n    this.activeCanvas = \"salesChart\"; // Initial canvas to display\n\n    this.activeChartInstance = null;\n  }\n\n  onDateRangeChange(dateRange) {\n    this.fromDate = dateRange.from;\n    this.toDate = dateRange.to;\n    this.filterSalesData();\n    console.log(\"I am in ONDate RangEcHANGE\");\n  }\n\n  scrollToGraph() {\n    // Scroll to the graph section when called\n    this.graphSection.nativeElement.scrollIntoView({\n      behavior: \"smooth\",\n      block: \"start\"\n    });\n  }\n\n  ngOnDestroy() {\n    this.destroyChart(this.salesChart);\n    this.destroyChart(this.cancellationsChart);\n    this.destroyChart(this.bookingSourceChart);\n    this.destroyChart(this.performanceChart);\n    this.destroyChart(this.areaChart);\n    this.destroyChart(this.materialGroupChart);\n    this.destroyChart(this.materialGroup3Chart);\n    this.destroyChart(this.channelChart);\n  }\n\n  destroyChart(chart) {\n    if (chart) {\n      chart.destroy();\n    }\n  }\n\n  ngOnInit() {\n    this.dateForm = this.fb.group({\n      fromDate: [\"\"],\n      toDate: [\"\"]\n    }); //this.fetchSalesData(); // Fetch data on component initialization\n\n    this.salesForm = this.fb.group({\n      vkbur: [\"1034\"],\n      vkorg: [\"9000\"],\n      vbeln: [\"\"],\n      kunnr: [\"\"],\n      matnr: [\"\"],\n      budat: [\"\"],\n      auart: [\"ZRS\"]\n    });\n    this.renderChart(this.currentChart);\n  }\n\n  ngAfterViewInit() {\n    this.renderChart(\"sales\");\n  }\n\n  showChart(period) {\n    this.currentChart = period; // Update the current chart\n\n    this.cdr.detectChanges(); // Clear existing charts and render the new one\n\n    this.renderChart(period);\n  }\n\n  renderChart(period) {\n    if (this.activeChartInstance) {\n      this.activeChartInstance.destroy();\n    } // Clear the previous chart if it exists\n\n\n    if (period === \"sales\") {\n      this.createSalesChart();\n      this.scrollToGraph();\n    } else if (period === \"cancellations\") {\n      this.createCancellationsChart();\n      this.scrollToGraph();\n    } else if (period === \"bookingsource\") {\n      this.createBookingSourceChart();\n      this.scrollToGraph();\n    } else if (period === \"materialgroup\") {\n      this.createMaterialGroupChart();\n      this.scrollToGraph();\n    } else if (period === \"area\") {\n      this.createAreaChart();\n      this.scrollToGraph();\n    } else if (period === \"materialgroup3\") {\n      this.createMaterialGroup3Chart();\n      this.scrollToGraph();\n    } else if (period === \"saletype\") {\n      this.createSaleTypeChart();\n      this.scrollToGraph();\n    } else if (period === \"channel\") {\n      this.createChannelChart();\n      this.scrollToGraph();\n    }\n  } // Method to fetch sales data\n\n\n  fetchSalesData() {\n    const formData = this.salesForm.value;\n    console.log(\"Sending form data:\", formData); // Log the form data\n\n    this.salesDataService.getSalesReport(formData).subscribe(data => {\n      console.log(\"Received data:\", data); // Log the received data\n\n      this.salesData = data; // Assign the data to salesData\n\n      this.filteredSalesData = data; // Initially show all data\n\n      this.createSalesChart();\n      this.createCancellationsChart(); // Create chart for cancellations\n\n      this.createPerformanceChart();\n      this.createBookingSourceChart();\n      this.createMaterialGroupChart();\n      this.createAreaChart();\n      this.createMaterialGroup3Chart();\n      this.createSaleTypeChart();\n      this.createChannelChart();\n    }, error => {\n      console.error(\"Error fetching sales data:\", error);\n    });\n  }\n\n  onFilter() {\n    const {\n      fromDate,\n      toDate\n    } = this.dateForm.value;\n\n    if (fromDate && toDate) {\n      this.filteredSalesData = this.salesData.filter(sale => {\n        const saleDate = new Date(sale.AUDAT); // Convert document date to Date object\n\n        return saleDate >= new Date(fromDate) && saleDate <= new Date(toDate);\n      });\n    } else {\n      this.filteredSalesData = this.salesData; // If no date range selected, show all data\n    } //this.updateCharts(this.filteredSalesData); // Update charts with filtered data\n\n\n    console.log(this.filteredSalesData);\n  }\n\n  filterSalesData() {\n    if (this.fromDate && this.toDate) {\n      this.filteredSalesData = this.salesData.filter(sale => {\n        const saleDate = new Date(sale.AUDAT); // Convert sale date to Date object\n\n        return saleDate >= new Date(this.fromDate) && saleDate <= new Date(this.toDate);\n      });\n      console.log(\"Filtered Sales Data:\", this.filteredSalesData);\n    } else {\n      this.filteredSalesData = this.salesData; // If no date range selected, show all data\n    }\n\n    this.updateCharts(this.filteredSalesData);\n  } // Method to create a sales chart\n\n\n  createSalesChart() {\n    const labels = this.filteredSalesData.map(sale => sale.AUDAT); // Assuming AUDAT is the sale date\n\n    const salesValues = this.filteredSalesData.map(sale => sale.MAIN); // Assuming 'amount' is in sales data\n\n    const chartData = {\n      labels,\n      datasets: [{\n        label: \"Sales Amount\",\n        data: salesValues,\n        backgroundColor: \"rgba(54, 162, 235, 0.5)\",\n        borderColor: \"rgba(54, 162, 235, 1)\",\n        borderWidth: 2,\n        hoverBackgroundColor: \"rgba(54, 162, 235, 0.8)\",\n        hoverBorderColor: \"rgba(54, 162, 235, 1)\"\n      }]\n    };\n    const config = {\n      type: \"bar\",\n      data: chartData,\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            beginAtZero: true,\n            grid: {\n              color: \"rgba(255, 255, 255, 0.1)\" // Light grid lines\n\n            },\n            ticks: {\n              color: \"#FFFFFF\" // White ticks\n\n            }\n          },\n          x: {\n            grid: {\n              color: \"rgba(255, 255, 255, 0.1)\"\n            },\n            ticks: {\n              color: \"#FFFFFF\" // White ticks\n\n            }\n          }\n        },\n        plugins: {\n          legend: {\n            labels: {\n              color: \"#FFFFFF\" // White legend text\n\n            }\n          }\n        }\n      }\n    }; // Destroy the existing chart if already rendered\n\n    if (this.salesChart) {\n      this.salesChart.destroy();\n    }\n\n    const ctx = document.getElementById(\"salesChart\").getContext(\"2d\");\n    this.salesChart = new chart_js_1.Chart(ctx, config);\n  } // Method to create a cancellations chart\n\n\n  createCancellationsChart() {\n    const labels = this.filteredSalesData.map(sale => sale.AUDAT); // Assuming AUDAT is the sale date\n\n    const cancellations = this.filteredSalesData.filter(sale => sale.CANC_CHRG).length; // Filter cancelled sales\n    // Group by date for cancellations\n\n    const cancellationCounts = this.filteredSalesData.reduce((acc, sale) => {\n      if (sale.CANC_CHRG) {\n        const saleDate = new Date(sale.AUDAT).toDateString(); // Group by date\n\n        acc[saleDate] = (acc[saleDate] || 0) + 1; // Count cancellations per date\n\n        console.log(\"Cancellations Data: \", this.filteredSalesData.filter(sale => sale.CANC_CHRG));\n      }\n\n      return acc;\n    }, {});\n    const chartLabels = Object.keys(cancellationCounts);\n    const chartData = Object.values(cancellationCounts);\n    const config = {\n      type: \"bar\",\n      data: {\n        labels: chartLabels,\n        datasets: [{\n          label: \"Cancellations\",\n          data: chartData,\n          backgroundColor: \"rgba(255, 99, 132, 0.2)\",\n          borderColor: \"rgba(255, 99, 132, 1)\",\n          borderWidth: 1\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            beginAtZero: true,\n            suggestedMax: 2\n          }\n        }\n      }\n    };\n    const ctx = document.getElementById(\"cancellationsChart\");\n\n    if (ctx) {\n      const chartCtx = ctx.getContext(\"2d\");\n\n      if (chartCtx) {\n        this.activeChartInstance = new chart_js_1.Chart(chartCtx, config);\n      } else {\n        console.error(\"Failed to get 2D context for cancellations chart\");\n      }\n    } else {\n      console.error(\"Cancellations chart element not found\");\n    } // Destroy the existing chart if already rendered\n\n\n    if (this.cancellationsChart) {\n      this.cancellationsChart.destroy();\n    }\n  } //method to create performance chart\n\n\n  createPerformanceChart() {\n    // Aggregate performance data by sales executive\n    const performanceData = this.filteredSalesData.reduce((acc, sale) => {\n      const execName = sale.SALE_EXE; // SAL_EXE is the sales executive name\n\n      acc[execName] = (acc[execName] || 0) + sale.SO_VAL; // Sum up the sales amount per executive\n\n      return acc;\n    }, {});\n    const execLabels = Object.keys(performanceData); // Sales executive names\n\n    const execSalesValues = Object.values(performanceData); // Their total sales amounts\n\n    const config = {\n      type: \"bar\",\n      data: {\n        labels: execLabels,\n        datasets: [{\n          label: \"Sales Executive Performance\",\n          data: execSalesValues,\n          backgroundColor: \"rgba(54, 162, 235, 0.2)\",\n          borderColor: \"rgba(54, 162, 235, 1)\",\n          borderWidth: 1\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    };\n    const ctx = document.getElementById(\"performanceChart\");\n\n    if (ctx) {\n      const chartCtx = ctx.getContext(\"2d\");\n\n      if (chartCtx) {\n        this.performanceChart = new chart_js_1.Chart(chartCtx, config);\n      } else {\n        console.error(\"Failed to get 2D context for performance chart\");\n      }\n    } else {\n      console.error(\"performance chart element not found\");\n    } // Destroy the existing chart if already rendered\n\n\n    if (this.performanceChart) {\n      this.performanceChart.destroy();\n    }\n  }\n\n  createBookingSourceChart() {\n    // Group sales data by booking source\n    const bookingSourceCounts = this.filteredSalesData.reduce((acc, sale) => {\n      const source = sale.KVGR2 || \"Unknown\"; // Use a default value if no source is present\n\n      acc[source] = (acc[source] || 0) + 1; // Count the occurrences of each source\n\n      return acc;\n    }, {});\n    const labels = Object.keys(bookingSourceCounts); // Booking sources\n\n    const data = Object.values(bookingSourceCounts); // Count of each source\n\n    const chartData = {\n      labels,\n      datasets: [{\n        label: \"Source of Booking\",\n        data: data,\n        backgroundColor: [\"rgba(255, 99, 132, 0.2)\", \"rgba(54, 162, 235, 0.2)\", \"rgba(255, 206, 86, 0.2)\", \"rgba(75, 192, 192, 0.2)\", \"rgba(153, 102, 255, 0.2)\", \"rgba(255, 159, 64, 0.2)\"],\n        borderColor: [\"rgba(255, 99, 132, 1)\", \"rgba(54, 162, 235, 1)\", \"rgba(255, 206, 86, 1)\", \"rgba(75, 192, 192, 1)\", \"rgba(153, 102, 255, 1)\", \"rgba(255, 159, 64, 1)\"],\n        borderWidth: 1\n      }]\n    };\n    const config = {\n      type: \"pie\",\n      data: chartData,\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            position: \"top\"\n          }\n        }\n      }\n    }; // Destroy the existing chart if already rendered\n\n    if (this.bookingSourceChart) {\n      this.bookingSourceChart.destroy();\n    }\n\n    const ctx = document.getElementById(\"bookingSourceChart\").getContext(\"2d\");\n    this.bookingSourceChart = new chart_js_1.Chart(ctx, config);\n  } // Method to create a material group chart\n\n\n  createMaterialGroupChart() {\n    const materialGroups = this.filteredSalesData.reduce((acc, sale) => {\n      const group = sale.MATKL; // Assuming MATERIAL_GROUP is the field name\n\n      acc[group] = (acc[group] || 0) + sale.MAIN; // Sum sales values by material group\n\n      return acc;\n    }, {});\n    const chartLabels = Object.keys(materialGroups);\n    const chartData = Object.values(materialGroups);\n    const config = {\n      type: \"pie\",\n      data: {\n        labels: chartLabels,\n        datasets: [{\n          label: \"Material Group\",\n          data: chartData,\n          backgroundColor: [\"rgba(255, 205, 86, 0.2)\", \"rgba(75, 192, 192, 0.2)\", \"rgba(255, 99, 132, 0.2)\" // Add more colors as needed\n          ],\n          borderColor: \"rgba(255, 205, 86, 1)\",\n          borderWidth: 1\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false\n      }\n    };\n\n    if (this.materialGroupChart) {\n      this.materialGroupChart.destroy();\n    }\n\n    const ctx = document.getElementById(\"materialGroupChart\").getContext(\"2d\");\n    this.materialGroupChart = new chart_js_1.Chart(ctx, config);\n  } // Method to create an area chart\n\n\n  createAreaChart() {\n    const areas = this.filteredSalesData.reduce((acc, sale) => {\n      const area = sale.UMREN; // Assuming AREA is the field name\n\n      acc[area] = (acc[area] || 0) + sale.MAIN; // Sum sales values by area\n\n      return acc;\n    }, {});\n    const chartLabels = Object.keys(areas);\n    const chartData = Object.values(areas);\n    const config = {\n      type: \"pie\",\n      data: {\n        labels: chartLabels,\n        datasets: [{\n          label: \"Unit Area\",\n          data: chartData,\n          backgroundColor: [\"rgba(255, 205, 86, 0.2)\", \"rgba(75, 192, 192, 0.2)\", \"rgba(255, 99, 132, 0.2)\"],\n          borderColor: \"rgba(255, 205, 86, 1)\",\n          borderWidth: 1\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false\n      }\n    };\n\n    if (this.areaChart) {\n      this.areaChart.destroy();\n    }\n\n    const ctx = document.getElementById(\"areaChart\").getContext(\"2d\");\n    this.areaChart = new chart_js_1.Chart(ctx, config);\n  } // Method to create a material group 3 chart\n\n\n  createMaterialGroup3Chart() {\n    const materialGroup3 = this.filteredSalesData.reduce((acc, sale) => {\n      const group3 = sale.MVGR3; // Assuming MATERIAL_GROUP_3 is the field name\n\n      acc[group3] = (acc[group3] || 0) + sale.MAIN; // Sum sales values by material group 3\n\n      return acc;\n    }, {});\n    const chartLabels = Object.keys(materialGroup3);\n    const chartData = Object.values(materialGroup3);\n    const config = {\n      type: \"pie\",\n      data: {\n        labels: chartLabels,\n        datasets: [{\n          label: \"Material Group 3\",\n          data: chartData,\n          backgroundColor: [\"rgba(255, 205, 86, 0.2)\", \"rgba(75, 192, 192, 0.2)\", \"rgba(255, 99, 132, 0.2)\"],\n          borderColor: \"rgba(255, 205, 86, 1)\",\n          borderWidth: 1\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false\n      }\n    };\n\n    if (this.materialGroup3Chart) {\n      this.materialGroup3Chart.destroy();\n    }\n\n    const ctx = document.getElementById(\"materialGroup3Chart\").getContext(\"2d\");\n    this.materialGroup3Chart = new chart_js_1.Chart(ctx, config);\n  } // Method to create a sale type chart\n\n\n  createSaleTypeChart() {\n    const saleTypes = this.filteredSalesData.reduce((acc, sale) => {\n      const type = sale.KVGR5; // Assuming SALE_TYPE is the field name\n\n      acc[type] = (acc[type] || 0) + sale.MAIN; // Sum sales values by sale type\n\n      return acc;\n    }, {});\n    const chartLabels = Object.keys(saleTypes);\n    const chartData = Object.values(saleTypes);\n    const config = {\n      type: \"pie\",\n      data: {\n        labels: chartLabels,\n        datasets: [{\n          label: \"Sale Type\",\n          data: chartData,\n          backgroundColor: [\"rgba(255, 205, 86, 0.2)\", \"rgba(75, 192, 192, 0.2)\", \"rgba(255, 99, 132, 0.2)\"],\n          borderColor: \"rgba(255, 205, 86, 1)\",\n          borderWidth: 1\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            position: \"top\",\n            labels: {\n              color: \"#FFFFFF\",\n              font: {\n                size: 14 // Smaller font size for legend\n\n              }\n            }\n          },\n          tooltip: {\n            backgroundColor: \"rgba(0, 0, 0, 0.8)\",\n            titleColor: \"#FFFFFF\",\n            bodyColor: \"#FFFFFF\" // White tooltip body\n\n          }\n        }\n      }\n    };\n\n    if (this.saleTypeChart) {\n      this.saleTypeChart.destroy();\n    }\n\n    const ctx = document.getElementById(\"saleTypeChart\").getContext(\"2d\");\n    this.saleTypeChart = new chart_js_1.Chart(ctx, config);\n  } // Method to create a channel chart\n\n\n  createChannelChart() {\n    const channels = this.filteredSalesData.reduce((acc, sale) => {\n      const channel = sale.CHANNEL; // Assuming CHANNEL is the field name\n\n      acc[channel] = (acc[channel] || 0) + sale.SO_VAL; // Sum sales values by channel\n\n      return acc;\n    }, {});\n    const chartLabels = Object.keys(channels);\n    const chartData = Object.values(channels);\n    const config = {\n      type: \"pie\",\n      data: {\n        labels: chartLabels,\n        datasets: [{\n          label: \"Channel\",\n          data: chartData,\n          backgroundColor: [\"rgba(255, 205, 86, 0.2)\", \"rgba(75, 192, 192, 0.2)\", \"rgba(255, 99, 132, 0.2)\"],\n          borderColor: \"rgba(255, 205, 86, 1)\",\n          borderWidth: 1\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false\n      }\n    };\n\n    if (this.channelChart) {\n      this.channelChart.destroy();\n    }\n\n    const ctx = document.getElementById(\"channelChart\").getContext(\"2d\");\n    this.channelChart = new chart_js_1.Chart(ctx, config);\n  } // Method to update charts based on the filtered data\n\n\n  updateCharts(filteredData) {\n    this.createSalesChart(); // Recreate the chart with the filtered data\n\n    this.createCancellationsChart();\n    this.createPerformanceChart();\n    this.createBookingSourceChart();\n    this.createMaterialGroupChart();\n    this.createAreaChart();\n    this.createMaterialGroup3Chart();\n    this.createSaleTypeChart();\n    this.createChannelChart();\n  }\n\n};\n\n__decorate([(0, core_1.ViewChild)(sidebar_component_1.SidebarComponent), __metadata(\"design:type\", sidebar_component_1.SidebarComponent)], TablesComponent.prototype, \"sidebar\", void 0);\n\n__decorate([(0, core_1.ViewChild)(\"graphSection\"), __metadata(\"design:type\", core_1.ElementRef)], TablesComponent.prototype, \"graphSection\", void 0);\n\nTablesComponent = __decorate([(0, core_1.Component)({\n  selector: \"app-tables\",\n  templateUrl: \"./tables.component.html\",\n  styleUrls: [\"./tables.component.css\"]\n}), __metadata(\"design:paramtypes\", [sales_data_service_1.SalesDataService, forms_1.FormBuilder, core_1.ChangeDetectorRef])], TablesComponent);\nexports.TablesComponent = TablesComponent;","map":null,"metadata":{},"sourceType":"script"}