{"ast":null,"code":"\"use strict\";\n\nexports.ISOTimezoneParser = void 0;\n\nvar _index = require(\"../../../constructFrom.cjs\");\n\nvar _index2 = require(\"../../../_lib/getTimezoneOffsetInMilliseconds.cjs\");\n\nvar _constants = require(\"../constants.cjs\");\n\nvar _Parser = require(\"../Parser.cjs\");\n\nvar _utils = require(\"../utils.cjs\"); // Timezone (ISO-8601)\n\n\nclass ISOTimezoneParser extends _Parser.Parser {\n  priority = 10;\n\n  parse(dateString, token) {\n    switch (token) {\n      case \"x\":\n        return (0, _utils.parseTimezonePattern)(_constants.timezonePatterns.basicOptionalMinutes, dateString);\n\n      case \"xx\":\n        return (0, _utils.parseTimezonePattern)(_constants.timezonePatterns.basic, dateString);\n\n      case \"xxxx\":\n        return (0, _utils.parseTimezonePattern)(_constants.timezonePatterns.basicOptionalSeconds, dateString);\n\n      case \"xxxxx\":\n        return (0, _utils.parseTimezonePattern)(_constants.timezonePatterns.extendedOptionalSeconds, dateString);\n\n      case \"xxx\":\n      default:\n        return (0, _utils.parseTimezonePattern)(_constants.timezonePatterns.extended, dateString);\n    }\n  }\n\n  set(date, flags, value) {\n    if (flags.timestampIsSet) return date;\n    return (0, _index.constructFrom)(date, date.getTime() - (0, _index2.getTimezoneOffsetInMilliseconds)(date) - value);\n  }\n\n  incompatibleTokens = [\"t\", \"T\", \"X\"];\n}\n\nexports.ISOTimezoneParser = ISOTimezoneParser;","map":null,"metadata":{},"sourceType":"script"}