{"ast":null,"code":"// import { Component, OnInit, ViewChild } from \"@angular/core\";\n// import { FormBuilder, FormGroup, NgForm, Validators } from \"@angular/forms\";\n// import { Router } from \"@angular/router\";\n// // import { fuseAnimations } from '@fuse/animations';\n// // import { FuseAlertComponent, FuseAlertType } from '@fuse/components/alert';\n// // import { AuthService } from 'app/core/auth/auth.service';\n// @Component({\n//   selector: \"app-login\",\n//   templateUrl: \"./login.component.html\",\n//   styleUrls: [\"./login.component.scss\"],\n// })\n// export class LoginComponent implements OnInit {\n//   currentImageIndex = 0;\n//   images = [\n//     \"/assets/img/image_1.png\",\n//     \"/assets/img/image_2.png\",\n//     \"/assets/img/image_3.png\",\n//     \"/assets/img/image_4.png\",\n//   ];\n//   imageTexts = [\n//     \"Ramky Infrastructure\",\n//     \"Ramky Estates and Farms\",\n//     \"Ramky Foundation\",\n//     \"Smilax Laboratories\",\n//   ];\n//   @ViewChild(\"signInNgForm\") signInNgForm: NgForm;\n//   // alert: { type: FuseAlertType; message: string } = {\n//   //   type: \"success\",\n//   //   message: \"\",\n//   // };\n//   // signInForm: UntypedFormGroup;\n//   showAlert: boolean = false;\n//   // constructor(\n//   //   private _activatedRoute: ActivatedRoute,\n//   //   // private _authService: AuthService,\n//   //   private _formBuilder: UntypedFormBuilder,\n//   //   private _router: Router\n//   // ) {}\n//   constructor(private fb: FormBuilder, private router: Router) {\n//     this.signInForm = this.fb.group({\n//       ZUSER: [\"\", Validators.required], // Username\n//       ZPASSWORD: [\"\", Validators.required], // Password\n//     });\n//   }\n//   ngOnInit(): void {\n//     this.signInForm = this.formBuilder.group({\n//       email: [\n//         \"bala@sharviinfotech.com\",\n//         [Validators.required, Validators.email],\n//       ],\n//       password: [\"1234\", Validators.required],\n//       rememberMe: [\"\"],\n//     });\n//     this.autoChangeImageAndText();\n//   }\n//   signInForm: FormGroup;\n//   // Method triggered on form submission\n//   onSubmit() {\n//     if (this.signInForm.valid) {\n//       const username = this.signInForm.get(\"ZUSER\")?.value;\n//       const password = this.signInForm.get(\"ZPASSWORD\")?.value;\n//       // Replace this part with your actual authentication logic\n//       if (username && password) {\n//         // Navigate to the dashboard page after successful login\n//         this.router.navigate([\"/dashboard\"]);\n//       } else {\n//         // You can show an error message here\n//         alert(\"Please enter valid username and password.\");\n//       }\n//     } else {\n//       // You can show an error message if the form is invalid\n//       alert(\"Form is not valid. Please fill in all required fields.\");\n//     }\n//   }\n//   // signIn(): void {\n//   //   if (this.signInForm.invalid) {\n//   //     return;\n//   //   }\n//   //   this.signInForm.disable();\n//   //   this.showAlert = false;\n//   //   this._authService.signIn(this.signInForm.value).subscribe(\n//   //     () => {\n//   //       const redirectURL =\n//   //         this._activatedRoute.snapshot.queryParamMap.get(\"redirectURL\") ||\n//   //         \"/signed-in-redirect\";\n//   //       this._router.navigateByUrl(redirectURL);\n//   //     },\n//   //     (response) => {\n//   //       this.signInForm.enable();\n//   //       this.signInNgForm.resetForm();\n//   //       this.alert = {\n//   //         type: \"error\",\n//   //         message: \"Wrong email or password\",\n//   //       };\n//   //       this.showAlert = true;\n//   //     }\n//   //   );\n//   // }\n//   autoChangeImageAndText() {\n//     const intervalTime = 5000; // Time between transitions (5 seconds)\n//     setInterval(() => {\n//       const images = document.querySelectorAll(\".background-img\");\n//       const textContainer = document.querySelector(\n//         \".dynamic-text\"\n//       ) as HTMLElement;\n//       // Remove 'active' class from the current image\n//       images[this.currentImageIndex].classList.remove(\"active\");\n//       // Change to the next image\n//       this.currentImageIndex = (this.currentImageIndex + 1) % images.length;\n//       // Add 'active' class to the new image\n//       images[this.currentImageIndex].classList.add(\"active\");\n//       // Change the dynamic text to match the current image\n//       textContainer.textContent = this.imageTexts[this.currentImageIndex];\n//       // Reset and reapply the text reveal animation\n//       textContainer.classList.remove(\"intro-reveal\");\n//       setTimeout(() => {\n//         textContainer.classList.add(\"intro-reveal\");\n//       }, 10); // Delay for the animation reset\n//     }, intervalTime);\n//   }\n// }","map":null,"metadata":{},"sourceType":"script"}