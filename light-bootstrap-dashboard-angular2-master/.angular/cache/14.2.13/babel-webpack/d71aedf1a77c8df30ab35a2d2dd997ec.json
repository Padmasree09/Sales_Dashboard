{"ast":null,"code":"\"use strict\";\n\nexports.endOfISOWeekYear = endOfISOWeekYear;\n\nvar _index = require(\"./constructFrom.cjs\");\n\nvar _index2 = require(\"./getISOWeekYear.cjs\");\n\nvar _index3 = require(\"./startOfISOWeek.cjs\");\n/**\n * The {@link endOfISOWeekYear} function options.\n */\n\n/**\n * @name endOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the end of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the end of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ContextDate - The `Date` type of the context function.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The end of an ISO week-numbering year\n *\n * @example\n * // The end of an ISO week-numbering year for 2 July 2005:\n * const result = endOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Sun Jan 01 2006 23:59:59.999\n */\n\n\nfunction endOfISOWeekYear(date, options) {\n  const year = (0, _index2.getISOWeekYear)(date, options);\n  const fourthOfJanuaryOfNextYear = (0, _index.constructFrom)(options?.in || date, 0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n\n  const _date = (0, _index3.startOfISOWeek)(fourthOfJanuaryOfNextYear, options);\n\n  _date.setMilliseconds(_date.getMilliseconds() - 1);\n\n  return _date;\n}","map":null,"metadata":{},"sourceType":"script"}