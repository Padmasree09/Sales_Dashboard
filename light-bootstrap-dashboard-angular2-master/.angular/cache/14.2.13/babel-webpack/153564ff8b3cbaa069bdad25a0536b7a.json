{"ast":null,"code":"\"use strict\"; // import { Component, OnInit, ViewChild } from \"@angular/core\";\n// import { FormBuilder, FormGroup, NgForm, Validators } from \"@angular/forms\";\n// import { Router } from \"@angular/router\";\n// // import { fuseAnimations } from '@fuse/animations';\n// // import { FuseAlertComponent, FuseAlertType } from '@fuse/components/alert';\n// // import { AuthService } from 'app/core/auth/auth.service';\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LoginComponent = void 0; // @Component({\n//   selector: \"app-login\",\n//   templateUrl: \"./login.component.html\",\n//   styleUrls: [\"./login.component.scss\"],\n// })\n// export class LoginComponent implements OnInit {\n//   currentImageIndex = 0;\n//   images = [\n//     \"/assets/img/image_1.png\",\n//     \"/assets/img/image_2.png\",\n//     \"/assets/img/image_3.png\",\n//     \"/assets/img/image_4.png\",\n//   ];\n//   imageTexts = [\n//     \"Ramky Infrastructure\",\n//     \"Ramky Estates and Farms\",\n//     \"Ramky Foundation\",\n//     \"Smilax Laboratories\",\n//   ];\n//   @ViewChild(\"signInNgForm\") signInNgForm: NgForm;\n//   // alert: { type: FuseAlertType; message: string } = {\n//   //   type: \"success\",\n//   //   message: \"\",\n//   // };\n//   // signInForm: UntypedFormGroup;\n//   showAlert: boolean = false;\n//   // constructor(\n//   //   private _activatedRoute: ActivatedRoute,\n//   //   // private _authService: AuthService,\n//   //   private _formBuilder: UntypedFormBuilder,\n//   //   private _router: Router\n//   // ) {}\n//   constructor(private fb: FormBuilder, private router: Router) {\n//     this.signInForm = this.fb.group({\n//       ZUSER: [\"\", Validators.required], // Username\n//       ZPASSWORD: [\"\", Validators.required], // Password\n//     });\n//   }\n//   ngOnInit(): void {\n//     this.signInForm = this.formBuilder.group({\n//       email: [\n//         \"bala@sharviinfotech.com\",\n//         [Validators.required, Validators.email],\n//       ],\n//       password: [\"1234\", Validators.required],\n//       rememberMe: [\"\"],\n//     });\n//     this.autoChangeImageAndText();\n//   }\n//   signInForm: FormGroup;\n//   // Method triggered on form submission\n//   onSubmit() {\n//     if (this.signInForm.valid) {\n//       const username = this.signInForm.get(\"ZUSER\")?.value;\n//       const password = this.signInForm.get(\"ZPASSWORD\")?.value;\n//       // Replace this part with your actual authentication logic\n//       if (username && password) {\n//         // Navigate to the dashboard page after successful login\n//         this.router.navigate([\"/dashboard\"]);\n//       } else {\n//         // You can show an error message here\n//         alert(\"Please enter valid username and password.\");\n//       }\n//     } else {\n//       // You can show an error message if the form is invalid\n//       alert(\"Form is not valid. Please fill in all required fields.\");\n//     }\n//   }\n//   // signIn(): void {\n//   //   if (this.signInForm.invalid) {\n//   //     return;\n//   //   }\n//   //   this.signInForm.disable();\n//   //   this.showAlert = false;\n//   //   this._authService.signIn(this.signInForm.value).subscribe(\n//   //     () => {\n//   //       const redirectURL =\n//   //         this._activatedRoute.snapshot.queryParamMap.get(\"redirectURL\") ||\n//   //         \"/signed-in-redirect\";\n//   //       this._router.navigateByUrl(redirectURL);\n//   //     },\n//   //     (response) => {\n//   //       this.signInForm.enable();\n//   //       this.signInNgForm.resetForm();\n//   //       this.alert = {\n//   //         type: \"error\",\n//   //         message: \"Wrong email or password\",\n//   //       };\n//   //       this.showAlert = true;\n//   //     }\n//   //   );\n//   // }\n//   autoChangeImageAndText() {\n//     const intervalTime = 5000; // Time between transitions (5 seconds)\n//     setInterval(() => {\n//       const images = document.querySelectorAll(\".background-img\");\n//       const textContainer = document.querySelector(\n//         \".dynamic-text\"\n//       ) as HTMLElement;\n//       // Remove 'active' class from the current image\n//       images[this.currentImageIndex].classList.remove(\"active\");\n//       // Change to the next image\n//       this.currentImageIndex = (this.currentImageIndex + 1) % images.length;\n//       // Add 'active' class to the new image\n//       images[this.currentImageIndex].classList.add(\"active\");\n//       // Change the dynamic text to match the current image\n//       textContainer.textContent = this.imageTexts[this.currentImageIndex];\n//       // Reset and reapply the text reveal animation\n//       textContainer.classList.remove(\"intro-reveal\");\n//       setTimeout(() => {\n//         textContainer.classList.add(\"intro-reveal\");\n//       }, 10); // Delay for the animation reset\n//     }, intervalTime);\n//   }\n// }\n\nconst core_1 = require(\"@angular/core\");\n\nconst forms_1 = require(\"@angular/forms\");\n\nconst router_1 = require(\"@angular/router\");\n\nlet LoginComponent = class LoginComponent {\n  constructor(fb, router) {\n    this.fb = fb;\n    this.router = router;\n    this.currentImageIndex = 0;\n    this.images = [\"/assets/img/image_1.png\", \"/assets/img/image_2.png\", \"/assets/img/image_3.png\", \"/assets/img/image_4.png\"];\n    this.imageTexts = [\"Ramky Infrastructure\", \"Ramky Estates and Farms\", \"Ramky Foundation\", \"Smilax Laboratories\"];\n  }\n\n  ngOnInit() {\n    this.signInForm = this.fb.group({\n      ZUSER: [\"\", forms_1.Validators.required],\n      ZPASSWORD: [\"\", forms_1.Validators.required]\n    });\n    this.autoChangeImageAndText();\n  }\n\n  onSubmit() {\n    if (this.signInForm.valid) {\n      const username = this.signInForm.get(\"ZUSER\")?.value;\n      const password = this.signInForm.get(\"ZPASSWORD\")?.value; // Placeholder for authentication logic\n\n      if (username && password) {\n        // Navigate to the dashboard page after successful login\n        this.router.navigate([\"/dashboard\"]);\n      } else {\n        // Show an error message\n        alert(\"Please enter a valid username and password.\");\n      }\n    } else {\n      // Show an error message if the form is invalid\n      alert(\"Form is not valid. Please fill in all required fields.\");\n    }\n  }\n\n  autoChangeImageAndText() {\n    const intervalTime = 5000; // Time between transitions (5 seconds)\n\n    setInterval(() => {\n      const images = document.querySelectorAll(\".background-img\");\n      const textContainer = document.querySelector(\".dynamic-text\"); // Remove 'active' class from the current image\n\n      images[this.currentImageIndex].classList.remove(\"active\"); // Change to the next image\n\n      this.currentImageIndex = (this.currentImageIndex + 1) % images.length; // Add 'active' class to the new image\n\n      images[this.currentImageIndex].classList.add(\"active\"); // Change the dynamic text to match the current image\n\n      textContainer.textContent = this.imageTexts[this.currentImageIndex]; // Reset and reapply the text reveal animation\n\n      textContainer.classList.remove(\"intro-reveal\");\n      setTimeout(() => {\n        textContainer.classList.add(\"intro-reveal\");\n      }, 10); // Delay for the animation reset\n    }, intervalTime);\n  }\n\n};\nLoginComponent = __decorate([(0, core_1.Component)({\n  selector: \"app-login\",\n  templateUrl: \"./login.component.html\",\n  styleUrls: [\"./login.component.scss\"]\n}), __metadata(\"design:paramtypes\", [forms_1.FormBuilder, router_1.Router])], LoginComponent);\nexports.LoginComponent = LoginComponent;","map":null,"metadata":{},"sourceType":"script"}