{"ast":null,"code":"\"use strict\";\n\nexports.parsers = void 0;\n\nvar _EraParser = require(\"./parsers/EraParser.cjs\");\n\nvar _YearParser = require(\"./parsers/YearParser.cjs\");\n\nvar _LocalWeekYearParser = require(\"./parsers/LocalWeekYearParser.cjs\");\n\nvar _ISOWeekYearParser = require(\"./parsers/ISOWeekYearParser.cjs\");\n\nvar _ExtendedYearParser = require(\"./parsers/ExtendedYearParser.cjs\");\n\nvar _QuarterParser = require(\"./parsers/QuarterParser.cjs\");\n\nvar _StandAloneQuarterParser = require(\"./parsers/StandAloneQuarterParser.cjs\");\n\nvar _MonthParser = require(\"./parsers/MonthParser.cjs\");\n\nvar _StandAloneMonthParser = require(\"./parsers/StandAloneMonthParser.cjs\");\n\nvar _LocalWeekParser = require(\"./parsers/LocalWeekParser.cjs\");\n\nvar _ISOWeekParser = require(\"./parsers/ISOWeekParser.cjs\");\n\nvar _DateParser = require(\"./parsers/DateParser.cjs\");\n\nvar _DayOfYearParser = require(\"./parsers/DayOfYearParser.cjs\");\n\nvar _DayParser = require(\"./parsers/DayParser.cjs\");\n\nvar _LocalDayParser = require(\"./parsers/LocalDayParser.cjs\");\n\nvar _StandAloneLocalDayParser = require(\"./parsers/StandAloneLocalDayParser.cjs\");\n\nvar _ISODayParser = require(\"./parsers/ISODayParser.cjs\");\n\nvar _AMPMParser = require(\"./parsers/AMPMParser.cjs\");\n\nvar _AMPMMidnightParser = require(\"./parsers/AMPMMidnightParser.cjs\");\n\nvar _DayPeriodParser = require(\"./parsers/DayPeriodParser.cjs\");\n\nvar _Hour1to12Parser = require(\"./parsers/Hour1to12Parser.cjs\");\n\nvar _Hour0to23Parser = require(\"./parsers/Hour0to23Parser.cjs\");\n\nvar _Hour0To11Parser = require(\"./parsers/Hour0To11Parser.cjs\");\n\nvar _Hour1To24Parser = require(\"./parsers/Hour1To24Parser.cjs\");\n\nvar _MinuteParser = require(\"./parsers/MinuteParser.cjs\");\n\nvar _SecondParser = require(\"./parsers/SecondParser.cjs\");\n\nvar _FractionOfSecondParser = require(\"./parsers/FractionOfSecondParser.cjs\");\n\nvar _ISOTimezoneWithZParser = require(\"./parsers/ISOTimezoneWithZParser.cjs\");\n\nvar _ISOTimezoneParser = require(\"./parsers/ISOTimezoneParser.cjs\");\n\nvar _TimestampSecondsParser = require(\"./parsers/TimestampSecondsParser.cjs\");\n\nvar _TimestampMillisecondsParser = require(\"./parsers/TimestampMillisecondsParser.cjs\");\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |\n * |  p  |                                |  P  |                                |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n */\n\n\nconst parsers = exports.parsers = {\n  G: new _EraParser.EraParser(),\n  y: new _YearParser.YearParser(),\n  Y: new _LocalWeekYearParser.LocalWeekYearParser(),\n  R: new _ISOWeekYearParser.ISOWeekYearParser(),\n  u: new _ExtendedYearParser.ExtendedYearParser(),\n  Q: new _QuarterParser.QuarterParser(),\n  q: new _StandAloneQuarterParser.StandAloneQuarterParser(),\n  M: new _MonthParser.MonthParser(),\n  L: new _StandAloneMonthParser.StandAloneMonthParser(),\n  w: new _LocalWeekParser.LocalWeekParser(),\n  I: new _ISOWeekParser.ISOWeekParser(),\n  d: new _DateParser.DateParser(),\n  D: new _DayOfYearParser.DayOfYearParser(),\n  E: new _DayParser.DayParser(),\n  e: new _LocalDayParser.LocalDayParser(),\n  c: new _StandAloneLocalDayParser.StandAloneLocalDayParser(),\n  i: new _ISODayParser.ISODayParser(),\n  a: new _AMPMParser.AMPMParser(),\n  b: new _AMPMMidnightParser.AMPMMidnightParser(),\n  B: new _DayPeriodParser.DayPeriodParser(),\n  h: new _Hour1to12Parser.Hour1to12Parser(),\n  H: new _Hour0to23Parser.Hour0to23Parser(),\n  K: new _Hour0To11Parser.Hour0To11Parser(),\n  k: new _Hour1To24Parser.Hour1To24Parser(),\n  m: new _MinuteParser.MinuteParser(),\n  s: new _SecondParser.SecondParser(),\n  S: new _FractionOfSecondParser.FractionOfSecondParser(),\n  X: new _ISOTimezoneWithZParser.ISOTimezoneWithZParser(),\n  x: new _ISOTimezoneParser.ISOTimezoneParser(),\n  t: new _TimestampSecondsParser.TimestampSecondsParser(),\n  T: new _TimestampMillisecondsParser.TimestampMillisecondsParser()\n};","map":null,"metadata":{},"sourceType":"script"}