{"ast":null,"code":"\"use strict\";\n\nexports.addBusinessDays = addBusinessDays;\n\nvar _index = require(\"./constructFrom.cjs\");\n\nvar _index2 = require(\"./isSaturday.cjs\");\n\nvar _index3 = require(\"./isSunday.cjs\");\n\nvar _index4 = require(\"./isWeekend.cjs\");\n\nvar _index5 = require(\"./toDate.cjs\");\n/**\n * The {@link addBusinessDays} function options.\n */\n\n/**\n * @name addBusinessDays\n * @category Day Helpers\n * @summary Add the specified number of business days (mon - fri) to the given date.\n *\n * @description\n * Add the specified number of business days (mon - fri) to the given date, ignoring weekends.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of business days to be added.\n * @param options - An object with options\n *\n * @returns The new date with the business days added\n *\n * @example\n * // Add 10 business days to 1 September 2014:\n * const result = addBusinessDays(new Date(2014, 8, 1), 10)\n * //=> Mon Sep 15 2014 00:00:00 (skipped weekend days)\n */\n\n\nfunction addBusinessDays(date, amount, options) {\n  const _date = (0, _index5.toDate)(date, options?.in);\n\n  const startedOnWeekend = (0, _index4.isWeekend)(_date, options);\n  if (isNaN(amount)) return (0, _index.constructFrom)(options?.in, NaN);\n\n  const hours = _date.getHours();\n\n  const sign = amount < 0 ? -1 : 1;\n  const fullWeeks = Math.trunc(amount / 5);\n\n  _date.setDate(_date.getDate() + fullWeeks * 7); // Get remaining days not part of a full week\n\n\n  let restDays = Math.abs(amount % 5); // Loops over remaining days\n\n  while (restDays > 0) {\n    _date.setDate(_date.getDate() + sign);\n\n    if (!(0, _index4.isWeekend)(_date, options)) restDays -= 1;\n  } // If the date is a weekend day and we reduce a dividable of\n  // 5 from it, we land on a weekend date.\n  // To counter this, we add days accordingly to land on the next business day\n\n\n  if (startedOnWeekend && (0, _index4.isWeekend)(_date, options) && amount !== 0) {\n    // If we're reducing days, we want to add days until we land on a weekday\n    // If we're adding days we want to reduce days until we land on a weekday\n    if ((0, _index2.isSaturday)(_date, options)) _date.setDate(_date.getDate() + (sign < 0 ? 2 : -1));\n    if ((0, _index3.isSunday)(_date, options)) _date.setDate(_date.getDate() + (sign < 0 ? 1 : -2));\n  } // Restore hours to avoid DST lag\n\n\n  _date.setHours(hours);\n\n  return _date;\n}","map":null,"metadata":{},"sourceType":"script"}