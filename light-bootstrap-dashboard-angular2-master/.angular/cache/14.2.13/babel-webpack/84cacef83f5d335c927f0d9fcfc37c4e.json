{"ast":null,"code":"\"use strict\";\n\nexports.secondsInYear = exports.secondsInWeek = exports.secondsInQuarter = exports.secondsInMonth = exports.secondsInMinute = exports.secondsInHour = exports.secondsInDay = exports.quartersInYear = exports.monthsInYear = exports.monthsInQuarter = exports.minutesInYear = exports.minutesInMonth = exports.minutesInHour = exports.minutesInDay = exports.minTime = exports.millisecondsInWeek = exports.millisecondsInSecond = exports.millisecondsInMinute = exports.millisecondsInHour = exports.millisecondsInDay = exports.maxTime = exports.daysInYear = exports.daysInWeek = exports.constructFromSymbol = void 0;\n/**\n* @module constants\n* @summary Useful constants\n* @description\n* Collection of useful date constants.\n*\n* The constants could be imported from `date-fns/constants`:\n*\n* ```ts\n* import { maxTime, minTime } from \"date-fns/constants\";\n*\n* function isAllowedTime(time) {\n*   return time <= maxTime && time >= minTime;\n* }\n* ```\n*/\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\n\nconst daysInWeek = exports.daysInWeek = 7;\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\n\nconst daysInYear = exports.daysInYear = 365.2425;\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\n\nconst maxTime = exports.maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\n\nconst minTime = exports.minTime = -maxTime;\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\n\nconst millisecondsInWeek = exports.millisecondsInWeek = 604800000;\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\n\nconst millisecondsInDay = exports.millisecondsInDay = 86400000;\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\n\nconst millisecondsInMinute = exports.millisecondsInMinute = 60000;\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\n\nconst millisecondsInHour = exports.millisecondsInHour = 3600000;\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\n\nconst millisecondsInSecond = exports.millisecondsInSecond = 1000;\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\n\nconst minutesInYear = exports.minutesInYear = 525600;\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\n\nconst minutesInMonth = exports.minutesInMonth = 43200;\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\n\nconst minutesInDay = exports.minutesInDay = 1440;\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\n\nconst minutesInHour = exports.minutesInHour = 60;\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\n\nconst monthsInQuarter = exports.monthsInQuarter = 3;\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\n\nconst monthsInYear = exports.monthsInYear = 12;\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\n\nconst quartersInYear = exports.quartersInYear = 4;\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\n\nconst secondsInHour = exports.secondsInHour = 3600;\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\n\nconst secondsInMinute = exports.secondsInMinute = 60;\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\n\nconst secondsInDay = exports.secondsInDay = secondsInHour * 24;\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\n\nconst secondsInWeek = exports.secondsInWeek = secondsInDay * 7;\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\n\nconst secondsInYear = exports.secondsInYear = secondsInDay * daysInYear;\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\n\nconst secondsInMonth = exports.secondsInMonth = secondsInYear / 12;\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\n\nconst secondsInQuarter = exports.secondsInQuarter = secondsInMonth * 3;\n/**\n * @constant\n * @name constructFromSymbol\n * @summary Symbol enabling Date extensions to inherit properties from the reference date.\n *\n * The symbol is used to enable the `constructFrom` function to construct a date\n * using a reference date and a value. It allows to transfer extra properties\n * from the reference date to the new date. It's useful for extensions like\n * [`TZDate`](https://github.com/date-fns/tz) that accept a time zone as\n * a constructor argument.\n */\n\nconst constructFromSymbol = exports.constructFromSymbol = Symbol.for(\"constructDateFrom\");","map":null,"metadata":{},"sourceType":"script"}