{"ast":null,"code":"\"use strict\";\n\nexports.LocalDayParser = void 0;\n\nvar _index = require(\"../../../setDay.cjs\");\n\nvar _Parser = require(\"../Parser.cjs\");\n\nvar _utils = require(\"../utils.cjs\"); // Local day of week\n\n\nclass LocalDayParser extends _Parser.Parser {\n  priority = 90;\n\n  parse(dateString, token, match, options) {\n    const valueCallback = value => {\n      // We want here floor instead of trunc, so we get -7 for value 0 instead of 0\n      const wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n      return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;\n    };\n\n    switch (token) {\n      // 3\n      case \"e\":\n      case \"ee\":\n        // 03\n        return (0, _utils.mapValue)((0, _utils.parseNDigits)(token.length, dateString), valueCallback);\n      // 3rd\n\n      case \"eo\":\n        return (0, _utils.mapValue)(match.ordinalNumber(dateString, {\n          unit: \"day\"\n        }), valueCallback);\n      // Tue\n\n      case \"eee\":\n        return match.day(dateString, {\n          width: \"abbreviated\",\n          context: \"formatting\"\n        }) || match.day(dateString, {\n          width: \"short\",\n          context: \"formatting\"\n        }) || match.day(dateString, {\n          width: \"narrow\",\n          context: \"formatting\"\n        });\n      // T\n\n      case \"eeeee\":\n        return match.day(dateString, {\n          width: \"narrow\",\n          context: \"formatting\"\n        });\n      // Tu\n\n      case \"eeeeee\":\n        return match.day(dateString, {\n          width: \"short\",\n          context: \"formatting\"\n        }) || match.day(dateString, {\n          width: \"narrow\",\n          context: \"formatting\"\n        });\n      // Tuesday\n\n      case \"eeee\":\n      default:\n        return match.day(dateString, {\n          width: \"wide\",\n          context: \"formatting\"\n        }) || match.day(dateString, {\n          width: \"abbreviated\",\n          context: \"formatting\"\n        }) || match.day(dateString, {\n          width: \"short\",\n          context: \"formatting\"\n        }) || match.day(dateString, {\n          width: \"narrow\",\n          context: \"formatting\"\n        });\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = (0, _index.setDay)(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"y\", \"R\", \"u\", \"q\", \"Q\", \"M\", \"L\", \"I\", \"d\", \"D\", \"E\", \"i\", \"c\", \"t\", \"T\"];\n}\n\nexports.LocalDayParser = LocalDayParser;","map":null,"metadata":{},"sourceType":"script"}