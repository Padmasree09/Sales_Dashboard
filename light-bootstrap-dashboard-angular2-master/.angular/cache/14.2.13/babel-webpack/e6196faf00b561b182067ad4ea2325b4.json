{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BarchartComponent = void 0;\n\nconst lbd_chart_component_1 = require(\"app/lbd/lbd-chart/lbd-chart.component\");\n\nconst i0 = require(\"@angular/core\");\n\nclass BarchartComponent {\n  constructor() {\n    this.customerChartData = {};\n    this.salesData = [];\n    this.customerChartType = lbd_chart_component_1.ChartType.Bar; // Use the enum for types\n\n    this.customerChartLegendItems = [];\n    this.lastUpdated = \"\";\n  }\n\n  onDateSubmit() {\n    this.fetchSalesData(this.fromDate, this.toDate);\n  }\n\n  fetchSalesData(fromDate, toDate) {\n    this.salesData = this.generateRandomSalesData();\n    const randomCustomerData = this.generateRandomCustomerData(); // const randomMaterialGroupData = this.generateRandomMaterialGroupData();\n\n    this.customerChartData = this.prepareCustomerChartData(randomCustomerData); // this.materialGroupChartData = this.prepareMaterialGroupChartData(\n    //   randomMaterialGroupData\n    // );\n\n    this.customerChartLegendItems = randomCustomerData.map(customer => ({\n      title: customer.name,\n      imageClass: \"fa fa-circle text-info\" // Example class for icons\n\n    })); // this.materialGroupChartLegendItems = randomMaterialGroupData.map(\n    //   (group) => ({\n    //     title: group.name,\n    //     imageClass: \"fa fa-circle text-success\", // Example class for icons\n    //   })\n    // );\n\n    this.lastUpdated = new Date().toLocaleString();\n    console.log(\"Customer Chart Data:\", this.customerChartData); // console.log(\"Material Group Chart Data:\", this.materialGroupChartData);\n  }\n\n  generateRandomSalesData() {\n    const sales = [];\n\n    for (let i = 0; i < 10; i++) {\n      sales.push({\n        \"Sales Order\": `SO-${i + 1}`,\n        \"Sales Office\": `Office ${Math.floor(Math.random() * 5) + 1}`,\n        \"Document Date\": new Date(Date.now() - Math.random() * 10000000000),\n        \"Customer Name\": `Customer ${Math.floor(Math.random() * 10) + 1}`,\n        Material: `Material ${Math.floor(Math.random() * 10) + 1}`,\n        \"SO Value\": Math.floor(Math.random() * 1000) + 100,\n        \"Amount Invoiced\": Math.floor(Math.random() * 1000) + 100\n      });\n    }\n\n    return sales;\n  }\n\n  generateRandomCustomerData() {\n    const customers = [];\n    const customerNames = [\"Customer A\", \"Customer B\", \"Customer C\", \"Customer D\"];\n\n    for (let i = 0; i < 4; i++) {\n      const customer = {\n        name: customerNames[i],\n        totalSales: Math.floor(Math.random() * 10000) + 1000 // Random sales between 1000 and 11000\n\n      };\n      customers.push(customer);\n    }\n\n    return customers;\n  }\n\n  prepareCustomerChartData(customers) {\n    return {\n      labels: customers.map(customer => customer.name),\n      series: [customers.map(customer => customer.totalSales)] // Wrap in an array\n\n    };\n  }\n\n  ngOnInit() {\n    this.fromDate = \"\";\n    this.toDate = \"\";\n  }\n\n}\n\nexports.BarchartComponent = BarchartComponent;\n\nBarchartComponent.ɵfac = function BarchartComponent_Factory(t) {\n  return new (t || BarchartComponent)();\n};\n\nBarchartComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: BarchartComponent,\n  selectors: [[\"app-barchart\"]],\n  decls: 18,\n  vars: 9,\n  consts: [[1, \"header\"], [1, \"title\"], [1, \"category\"], [1, \"content\"], [3, \"submit\"], [1, \"form-group\"], [\"for\", \"fromDate\"], [\"type\", \"date\", \"id\", \"fromDate\", \"name\", \"fromDate\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"toDate\"], [\"type\", \"date\", \"id\", \"toDate\", \"name\", \"toDate\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [3, \"title\", \"subtitle\", \"chartType\", \"chartData\", \"legendItems\", \"withHr\", \"footerText\"]],\n  template: function BarchartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h4\", 1);\n      i0.ɵɵtext(2, \"Select Date Range\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"p\", 2);\n      i0.ɵɵtext(4, \"Filter Data by Date\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(5, \"div\", 3)(6, \"form\", 4);\n      i0.ɵɵlistener(\"submit\", function BarchartComponent_Template_form_submit_6_listener() {\n        return ctx.onDateSubmit();\n      });\n      i0.ɵɵelementStart(7, \"div\", 5)(8, \"label\", 6);\n      i0.ɵɵtext(9, \"From Date:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"input\", 7);\n      i0.ɵɵlistener(\"ngModelChange\", function BarchartComponent_Template_input_ngModelChange_10_listener($event) {\n        return ctx.fromDate = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(11, \"div\", 5)(12, \"label\", 8);\n      i0.ɵɵtext(13, \"To Date:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"input\", 9);\n      i0.ɵɵlistener(\"ngModelChange\", function BarchartComponent_Template_input_ngModelChange_14_listener($event) {\n        return ctx.toDate = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(15, \"button\", 10);\n      i0.ɵɵtext(16, \"Submit\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelement(17, \"lbd-chart\", 11);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(10);\n      i0.ɵɵproperty(\"ngModel\", ctx.fromDate);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.toDate);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"title\", \"Top 5 Customers\")(\"subtitle\", \"Sales Transactions Overview\")(\"chartType\", ctx.customerChartType)(\"chartData\", ctx.customerChartData)(\"legendItems\", ctx.customerChartLegendItems)(\"withHr\", true)(\"footerText\", \"Updated on: \" + ctx.lastUpdated);\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"script"}